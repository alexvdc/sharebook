
Pourquoi hash1.equals(hash2) retourne false alors que le mot de passe est identique ?
====================================================================================

1. Le rôle du salt (grain de sel) dans BCrypt:
==============================================
BCrypt ajoute automatiquement un salt aléatoire à chaque hachage. Ce salt est :

==> Unique pour chaque hachage, même avec le même mot de passe.

==> Inclus dans le hash final (les 22 premiers caractères du hash).
hash1 = [salt1][hash_1234+salt1]
hash2 = [salt2][hash_1234+salt2]

Un hash généré par BCryptPasswordEncoder ressemble à ça :

       <-------SALT--------->
$2a$10$E4NnW4FA5POY4s2Y3J.P2e Vq4OXur9jJcs8jC10k6jF6NUn7c5n3K
│   │    │                      │
│   │    │                      └─> le hachage du mot de passe + sel
│   │    └─> cost (facteur de complexité, ici 10 = 2^10 opérations)
│   └─> version de l'algo BCrypt
└─> identifiant de l'algorithme


Salt: E4NnW4FA5POY4s2Y3J.P2e








2. Comment BCrypt vérifie quand même la validité ?
==================================================
La méthode matches de BCrypt décompose le hash stocké pour
 le salt original, puis refait le calcul :
boolean valid = encoder.matches("1234", hash1); // → true

Prenons un exemple sans salt :
=============================
    Alice choisit le mot de passe 123456

    Bob choisit aussi le mot de passe 123456

    Si on les hache avec un algo comme SHA-256 → même hash !
    → Cela permet à un attaquant de reconnaître les utilisateurs ayant le même mot de passe.

Avec le salage :

    Alice → 123456 + salt1 → hash1

    Bob → 123456 + salt2 → hash2
    ✅ Les hash sont différents, même pour le même mot de passe !

NB
----------
    Ne jamais comparer les hashs directement avec .equals() :
    ça n'a pas de sens !

    Toujours utiliser passwordEncoder.matches(inputPassword, storedHash)
    pour vérifier un mot de passe.
*/
